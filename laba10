import tkinter as tk
from tkinter import messagebox
import math

class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("Крестики-Нолики")
        self.board = [" " for _ in range(9)]  # Создание пустого поля
        self.player = "X"  # Игрок всегда играет за "X"
        self.bot = "O"  # Бот играет за "O"
        self.buttons = []  # Список для кнопок

        self.create_board()

    def create_board(self):
        # Создаем игровое поле с кнопками 3x3
        for i in range(9):
            button = tk.Button(self.root, text=" ", font=("Arial", 24), width=5, height=2,
                               command=lambda i=i: self.player_move(i))
            button.grid(row=i//3, column=i%3)
            self.buttons.append(button)

    def player_move(self, index):
        # Ход игрока
        if self.board[index] == " ":
            self.board[index] = self.player
            self.buttons[index].config(text=self.player)

            if self.check_win(self.player):
                messagebox.showinfo("Победа!", "Игрок выиграл!")
                self.reset_board()
            elif " " not in self.board:
                messagebox.showinfo("Ничья", "Ничья!")
                self.reset_board()
            else:
                self.bot_move()

    def bot_move(self):
        # Ход бота с использованием алгоритма Минимакс
        best_score = -math.inf
        best_move = None
        for i in range(9):
            if self.board[i] == " ":
                self.board[i] = self.bot
                score = self.minimax(self.board, 0, False)
                self.board[i] = " "
                if score > best_score:
                    best_score = score
                    best_move = i

        if best_move is not None:
            self.board[best_move] = self.bot
            self.buttons[best_move].config(text=self.bot)

            if self.check_win(self.bot):
                messagebox.showinfo("Победа!", "Бот выиграл!")
                self.reset_board()
            elif " " not in self.board:
                messagebox.showinfo("Ничья", "Ничья!")
                self.reset_board()

    def minimax(self, board, depth, is_maximizing):
        # Алгоритм Минимакс
        if self.check_win(self.bot):
            return 1
        elif self.check_win(self.player):
            return -1
        elif " " not in board:
            return 0

        if is_maximizing:
            best_score = -math.inf
            for i in range(9):
                if board[i] == " ":
                    board[i] = self.bot
                    score = self.minimax(board, depth + 1, False)
                    board[i] = " "
                    best_score = max(score, best_score)
            return best_score
        else:
            best_score = math.inf
            for i in range(9):
                if board[i] == " ":
                    board[i] = self.player
                    score = self.minimax(board, depth + 1, True)
                    board[i] = " "
                    best_score = min(score, best_score)
            return best_score

    def check_win(self, player):
        # Проверка всех выигрышных комбинаций
        win_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Горизонтальные
            [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Вертикальные
            [0, 4, 8], [2, 4, 6]  # Диагонали
        ]
        for combo in win_combinations:
            if self.board[combo[0]] == self.board[combo[1]] == self.board[combo[2]] == player:
                return True
        return False

    def reset_board(self):
        # Сброс игрового поля для новой игры
        self.board = [" " for _ in range(9)]
        for button in self.buttons:
            button.config(text=" ")

# Инициализация Tkinter
root = tk.Tk()
game = TicTacToe(root)
root.mainloop()
